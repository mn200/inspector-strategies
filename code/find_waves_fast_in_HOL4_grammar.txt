(* New Opn functions needed below:
    - divval, real division
    - using plusval for both integer and real addition
    - expval, exponent function
    - multval, multiplication
    - minusvalval, subtraction
    - maxval, returns max of two numbers
    - cmpGTEval, returns true on greater than or equal else false
    
    
   Other conversion questions: (dealt with in 7/18/14 meeting, copied to log)
   + do we need ~ for -1? no
   + VRead for doubles?  VarExp for ints?  VRead when inside a dexpr
   + where is the definition of "write" for "stmt = Assign write ...", top of file
   + the inspector has some Assign's that involve ivecs instead of dvecs.  Do we need to differentiate there?  don't care
        - used idval for identity function on these, except those are not dexprs, hmmm...
    + should I just make orgbody a list, yes change that
*)

(**** Original Code ****)

(* sum = Sum_{k=0}^{w-1} 1 / exp( k * data[i] * data[j] ) *)
val summationLoop =
    [
        AssignVar "sum" Value(Real(0.0));
        ForLoop "k" (D (Value(Int 0)) (VarExp "workPerIter") )
            AssignVar "sum" 
                (Opn plusval [ 
                    VarExp "sum";
                    Opn divval [
                        Value (Real 1.0);
                        Opn expval [
                            Opn multval [
                                Opn multval [
                                    VRead "k";
                                    ARead "data_org"
                                        (ISub "row" (VarExp "p"))
                                ];
                                ARead "data_org"
                                    (ISub "col" (VarExp "p"))
                            ]
                        ]
                    ]
                ])
    ]

(* FIXME: Michael is ++ the correct concatenation op for HOL? *)
(* FIXME: Michael is TL going to return the tail of the list in HOL? *)
val orgbody = summation ++ 
    [
        (* data_org[ row[p] ] += 1.0 + sum; *)
        Assign ("data_org", (ISub "row" (VarExp "p")))
            [ ARead "data_org" (ISub "row" (VarExp "p"));
              VRead "sum
            ]
            (\p . plusval [HD p; Real 1.0; HD (TL p)])
              
        (* data_org[ col[p] ] += 1.0 + sum; *)
        Assign ("data_org", (ISub "col" (VarExp "p")))
            [ ARead "data_org" (ISub "col" (VarExp "p"));
              VRead "sum
            ]
            (\p . plusval [HD p; Real 1.0; HD (TL p)])
    ]

val original = ForLoop "p" (D (Value(Int 0)) (VarExp "nnz")) (Seq orgbody))
                             

(**** Wavefront Inspector ****)
val findWavesFast =
    Seq [
        Malloc "lw_iter" (VarExp "N") (Int (-1));
        Malloc "lr_iter" (VarExp "N") (Int (-1));
        Malloc "wave" (VarExp "nnz") (Int 0);
        AssignVar "max_wave" (Value(Int 0));
        
        ForLoop "p" (D (Value(Int 1)) (VarExp "nnz") )
            (Seq [
                Assign 
                    ("lr_iter",
                        (ISub "row" 
                            (Opn minusval [(VarExp "p"); (Value(Int(1)))])))
                    [VRead "p"]
                    (\p . minusval [HD p; Int 1] );
                Assign
                    ("lr_iter",
                        (ISub "col" 
                            (Opn minusval [(VarExp "p"); (Value(Int(1)))])))
                    [(VRead "p")]
                    (\p . minusval [HD p; Int 1] );
                Assign "lw_iter"
                    ("lw_iter",
                        (ISub "row" 
                            (Opn minusval [(VarExp "p"); (Value(Int(1)))])))
                    [VRead "p"]
                    (\p . minusval [HD p; Int 1] );
                Assign
                    ("lw_iter",
                        (ISub "col" 
                            (Opn minusval [(VarExp "p"); (Value(Int(1)))])))
                    [VRead "p"]
                    (\p . minusval [HD p; Int 1] );
                
                AssignVar "r" (ISub "row" (VarExp "p"));
                AssignVar "c" (ISub "col" (VarExp "p"));

                IfStmt  (Opn cmpGTEval [(ISub "lw_iter" (VarExp "r")); 
                                (Value(Int(0)))] )
                        (Assign
                            ("wave",VarExp "p")
                            [ARead "wave" (VarExp "p");
                             ARead "wave" (ISub "lw_iter" (VarExp "r"))]
                             (\p . maxval [HD p; 
                                           plusval [HD (TL p); Int 1]])
                        )
                        (Seq []);
                IfStmt  (Opn cmpGTEval [(ISub "lr_iter" (VarExp "r")); 
                                (Value(Int(0)))] )
                        (Assign
                            ("wave",VarExp "p")
                            [ARead "wave" (VarExp "p");
                             ARead "wave" (ISub "lr_iter" (VarExp "r"))]
                             (\p . maxval [HD p; 
                                           plusval [HD (TL p); Int 1]])
                        )
                        (Seq []);
                IfStmt  (Opn cmpGTEval [(ISub "lw_iter" (VarExp "c")); 
                                (Value(Int(0)))] )
                        (Assign
                            ("wave",VarExp "p")
                            [ARead "wave" (VarExp "p");
                             ARead "wave" (ISub "lw_iter" (VarExp "c"))]
                             (\p . maxval [HD p; 
                                           plusval [HD (TL p); Int 1]])
                        )
                        (Seq []);
                IfStmt  (Opn cmpGTEval [(ISub "lr_iter" (VarExp "c")); 
                                (Value(Int(0)))] )
                        (Assign
                            ("wave",VarExp "p")
                            [ARead "wave" (VarExp "p");
                             ARead "wave" (ISub "lr_iter" (VarExp "c"))]
                             (\p . maxval [HD p; 
                                           plusval [HD (TL p); Int 1]])
                        )
                        (Seq []);

                AssignVar "max_wave" (Opn maxval [
                                        (VarExp "max_wave");
                                        (ISub "wave" (VarExp "p"))] )
            ]);
            
            Malloc "wavestart" (Opn plusval [VarExp "max_wave"; Value (Int 2)] )
                (Int(0));
                
            ForLoop "p" (D (Value(Int(0))) VarExp("nnz"))
                (Assign ("wavestart", ISub "wave" (VarExp "p"))
                    [ARead "wavestart" (ISub "wave" (VarExp "p"))]
                    (\s . plusval [w; Int 1]) );

            ForLoop "w" (D (Value(Int 1)) (Opn plusval [
                                                (VarExp "max_wave");
                                                (Value(Int 1)) ]))
                (Assign ("wavestart", VarExp "w")
                    [ARead "wavestart" (Opn minusval (VarExp "w") 
                                                     (Value(Int 1)));
                     ARead "wavestart" (VarExp "w")]
                    (\p. plusval [HD p; HD (TL p)]) );
                          
            Malloc "wavefronts" (VarExp "nnz") (Int 0);
            ForLoop "prev" (D (Value(Int 1)) (Opn plusval [(VarExp "nnz");
                                                           (Value(Int 1))] ))
                (Seq [
                    AssignVar "p" (Opn minusval [VarExp "nnz"; VarExp "prev"]);
                    AssignVar "w" (ISub "wave" (VarExp "p"));
                    Assign ("wavestart",VarExp "w")
                        [ARead "wavestart" (VarExp "w")]
                        (\s . minusval [HD s; Int 1]);
                    Assign ("wavefronts",ISub "wavestart" (VarExp "w"))
                        [VRead "p"]
                        (\p . HD p)
                ])    
    ]

(**** Wavefront Executor ****)

executor =
    ForLoop "w" (D (Value(Int 0)) (VarExp max_wave"))
        (ParLoop "k" (D (ISub "wavestart" (VarExp "w"))
                        (ISub "wavestart" (Opn plusval (VarExp "w")
                                                        (Value(Int 1)))))
            (Seq 
                (AssignVar "p" (ISub "wavefronts" (VarExp "k")) ::
                orgbody)
            ]))

